---
kind: ConfigMap
apiVersion: v1
metadata:
  name: cm-app-properties-{{ canary_suffix }}
data:
  application.properties: |-
    server.port=8080
    server.shutdown=graceful

    fpis.endpoint=http://{{ int_entry.antifraud.fpis.host }}/{{ fraud.adapter.context }}

    spring.jpa.properties.hibernate.jdbc.time_zone=UTC
    spring.jpa.properties.hibernate.cache.use_second_level_cache=true
    spring.jpa.properties.hibernate.cache.use_query_cache=true
    spring.jpa.properties.hibernate.cache.region.factory_class=jcache

    spring.main.banner-mode=off
    spring.application.name={{ os_project.name }}
    spring.liquibase.enabled=false
    spring.profiles.active=default

    server.servlet.encoding.charset=UTF-8
    server.servlet.encoding.force=true
    server.servlet.encoding.enabled=true
    server.tomcat.uri-encoding=UTF-8

    # all endpoints are enabled by default
    management.endpoints.enabled-by-default=true
    management.endpoints.web.base-path={{ context_prefix }}/actuator
    # only health and prometheus are available as web endpoints
    management.endpoints.web.exposure.include=health,prometheus
    # all endpoints are available through jmx
    management.endpoints.jmx.exposure.include=*
    # enable liveness and readiness health endpoints
    management.endpoint.health.probes.enabled=true
    # always show details and components in health endpoint response
    management.endpoint.health.show-details=always
    # application name for metrics
    management.metrics.tags.application={{ os_project.name }}
    # export metrics to prometheus
    management.metrics.export.prometheus.enabled=true

    # StandIn plugin
    standin.plugin.configuration.replicationStrategy={{ standin.plugin.configuration.replication_strategy | default ('STANDIN_LOCKS') }}
    standin.plugin.configuration.serializerType={{ standin.plugin.configuration.serializer_type | default ('BINARY_KRYO') }}
    standin.plugin.configuration.partitionLockMode={{ standin.plugin.configuration.partition_lock_mode | default ('NONE') }}
    standin.plugin.configuration.partitionMultiplyingMode={{ standin.plugin.configuration.partition_multiplying_mode | default ('FORBIDDEN') }}
    standin.plugin.configuration.orderingControlStrategy={{ standin.plugin.configuration.ordering_control_strategy | default ('IDEMPOTENT_ORDERING_CONTROL') }}

    # Application Journal
    appjournal.moduleId=pprb4-digital-fraud
    standin.cloud.client.mmtCallTimeout=30
    standin.cloud.client.heartBeatPeriod=1000
    standin.cloud.client.subscriptionKafkaConcurrency={{ standin.cloud.client.subscription_kafka_concurrency | default(5) }}
    standin.cloud.client.groupId=group_1
    standin.cloud.client.kafka-retry={{ standin.cloud.client.kafka_retry | default(0) }}
    standin.cloud.client.retry-timeout={{ standin.cloud.client.retry_timeout | default(10000) }}
    standin.cloud.client.kafka.producerConfig."[security.protocol]"=SSL
    standin.cloud.client.kafka.producerConfig."[ssl.keystore.location]"=/opt/keystore/kafka/server.keystore.jks
    standin.cloud.client.kafka.producerConfig."[ssl.truststore.location]"=/opt/keystore/kafka/trust.jks
    standin.cloud.client.kafka.producerConfig."[ssl.keystore.type]"=JKS
    standin.cloud.client.kafka.producerConfig."[ssl.truststore.type]"=JKS
    standin.cloud.client.kafka.producerConfig."[ssl.protocol]"=TLS
    standin.cloud.client.kafka.producerConfig."[ssl.enabled.protocols]"=TLSv1.2
    standin.cloud.client.kafka.producerConfig."[ssl.endpoint.identification.algorithm]"=
    standin.cloud.client.kafka.consumerConfig."[security.protocol]"=SSL
    standin.cloud.client.kafka.consumerConfig."[ssl.keystore.location]"=/opt/keystore/kafka/server.keystore.jks
    standin.cloud.client.kafka.consumerConfig."[ssl.truststore.location]"=/opt/keystore/kafka/trust.jks
    standin.cloud.client.kafka.consumerConfig."[ssl.keystore.type]"=JKS
    standin.cloud.client.kafka.consumerConfig."[ssl.truststore.type]"=JKS
    standin.cloud.client.kafka.consumerConfig."[ssl.protocol]"=TLS
    standin.cloud.client.kafka.consumerConfig."[ssl.enabled.protocols]"=TLSv1.2
    standin.cloud.client.kafka.consumerConfig."[ssl.endpoint.identification.algorithm]"=

    {% for entry in integration_entries | flatten %}
    {% if entry.ci is defined and entry.health_path is defined %}
        health.http.endpoint[{{ entry.ci }}_{{ entry.name }}].url=http://{{ entry.host }}{{ ':' ~ entry.istio_mesh_port if entry.istio_mesh_port is defined }}{{ entry.health_path }}
    {% endif %}
    {% endfor %}
  jvm-arguments: |-
